# ● Условие
# На вход подается число n.
# ● Задача
# Написать скрипт в любой парадигме, который выводит на экран таблицу умножения всех чисел от 1 до n.
# Обоснуйте выбор парадигм.

def print_multiplication_table(n):
    for i in range(1, n + 1):
        for j in range(1, 10):
            print(f"{i} * {j} = {i * j}")
        print()


n = int(input("Введите число n: "))
print_multiplication_table(n)
# Обоснование выбора процедурной парадигмы:
#
# Простота: Задача проста и не требует создания сложных структур данных или объектов. Процедурное программирование
# позволяет решить задачу прямолинейно.
#
# Читаемость: Процедурный код обычно более читаем и понятен, особенно для такой простой задачи. Каждая процедура
# (функция) выполняет конкретную задачу, что делает код более структурированным.
#
# Простые вложенные циклы: В данной задаче нам нужно использовать два вложенных цикла: первый цикл перебирает числа
# от 1 до n, а второй цикл перебирает числа от 1 до 9 (что соответствует таблице умножения).
#
# Функции: Использование функции print_multiplication_table делает код более организованным и позволяет повторно
# использовать эту функцию в других частях программы, если это понадобится.
#
# Процедурное программирование в данном случае обеспечивает простое и понятное решение задачи.
